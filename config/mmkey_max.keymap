#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

//#define ZMK_POINTING_DEFAULT_SCRL_VAL 100

#define MOUSE 5

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <12 13>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &to 0>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESCAPE  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5       &kp NUMBER_6  &kp N7       &kp N8          &kp N9          &kp N0          &kp MINUS
&kp TAB     &kp Q         &kp W         &kp E         &kp R         &kp T        &kp Y         &kp U        &kp I           &kp O           &kp P           &kp BACKSPACE
&kp LCTRL   &kp A         &kp S         &kp D         &kp F         &kp G        &kp H         &kp J        &kp K           &kp L           &kp APOSTROPHE  &kp ENTER
&kp LSHIFT  &kp Z         &kp X         &kp C         &kp V         &kp B        &kp N         &kp M        &kp COMMA       &kp PERIOD      &kp SLASH       &lt 4 SLASH
                          &kp LALT      &kp LWIN      &kp SPACE     &kp SPACE    &lt 2 SPACE   &lt 1 SPACE  &kp LANGUAGE_2  &kp LANGUAGE_1
            >;
        };

        symbol {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans         &trans      &trans            &trans             &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp MINUS      &kp EQUAL   &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp SEMICOLON  &kp SQT     &kp GRAVE         &trans             &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp COMMA      &kp PERIOD  &kp SLASH         &kp BACKSLASH      &trans
                &trans  &trans  &trans  &trans    &trans  &trans         &trans      &trans
            >;
        };

        arrow {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans    &trans        &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans    &trans        &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp LEFT  &kp DOWN  &kp UP_ARROW  &kp RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans    &trans        &trans     &trans  &trans
                &trans  &trans  &trans  &trans    &trans    &trans    &trans        &trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans
            >;
        };

        function {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans
            >;
        };
    };
};
